//
//  ExerciseService.swift
//  SportApp
//
//  Created by Aleksandr Meshchenko on 30.08.25.
//

import Foundation

class ExerciseService {
    private let session = URLSession.shared
    
    func fetchExercises(
        name: String? = nil,
        type: String? = nil,
        muscle: String? = nil,
        difficulty: String? = nil,
        offset: Int = 0
    ) async throws -> [Exercise] {
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ API –∫–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        guard APIConfig.apiKey != "YOUR_API_KEY_HERE" else {
            print("‚ö†Ô∏è ERROR: API Key not set! Please add your API key to APIConfig.swift")
            throw NetworkError.missingAPIKey
        }
        
        var components = URLComponents(string: APIConfig.baseURL + APIConfig.exercisesEndpoint)!
        var queryItems: [URLQueryItem] = []
        
        if let name = name, !name.isEmpty {
            queryItems.append(URLQueryItem(name: "name", value: name))
        }
        if let type = type {
            queryItems.append(URLQueryItem(name: "type", value: type))
        }
        if let muscle = muscle {
            queryItems.append(URLQueryItem(name: "muscle", value: muscle))
        }
        if let difficulty = difficulty {
            queryItems.append(URLQueryItem(name: "difficulty", value: difficulty))
        }
        if offset > 0 {
            queryItems.append(URLQueryItem(name: "offset", value: String(offset)))
        }
        
        components.queryItems = queryItems.isEmpty ? nil : queryItems
        
        guard let url = components.url else {
            throw NetworkError.invalidURL
        }
        
        // Debug: –ø–µ—á–∞—Ç–∞–µ–º URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        print("üåê Fetching from URL: \(url.absoluteString)")
        
        var request = URLRequest(url: url)
        APIConfig.headers.forEach { key, value in
            request.setValue(value, forHTTPHeaderField: key)
        }
        
        do {
            let (data, response) = try await session.data(for: request)
            
            guard let httpResponse = response as? HTTPURLResponse else {
                throw NetworkError.invalidResponse
            }
            
            print("üì° Response status code: \(httpResponse.statusCode)")
            
            guard (200...299).contains(httpResponse.statusCode) else {
                // –ï—Å–ª–∏ 401 - –ø—Ä–æ–±–ª–µ–º–∞ —Å API –∫–ª—é—á–æ–º
                if httpResponse.statusCode == 401 {
                    print("‚ùå Authentication failed. Check your API key!")
                    throw NetworkError.authenticationFailed
                }
                throw NetworkError.httpError(httpResponse.statusCode)
            }
            
            // Debug: –ø–µ—á–∞—Ç–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            print("‚úÖ Received \(data.count) bytes")
            
            // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å JSON –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if let jsonString = String(data: data, encoding: .utf8) {
                print("üìù Response preview: \(jsonString.prefix(200))...")
            }
            
            let exercises = try JSONDecoder().decode([Exercise].self, from: data)
            print("‚úÖ Decoded \(exercises.count) exercises")
            return exercises
            
        } catch {
            print("‚ùå Network error: \(error.localizedDescription)")
            throw error
        }
    }
}

enum NetworkError: LocalizedError {
    case invalidURL
    case invalidResponse
    case httpError(Int)
    case missingAPIKey
    case authenticationFailed
    
    var errorDescription: String? {
        switch self {
        case .invalidURL:
            return "Invalid URL"
        case .invalidResponse:
            return "Invalid response from server"
        case .httpError(let code):
            return "HTTP error: \(code)"
        case .missingAPIKey:
            return "API Key not configured. Please add your API key to APIConfig.swift"
        case .authenticationFailed:
            return "Authentication failed. Please check your API key."
        }
    }
}
